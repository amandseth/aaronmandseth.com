---
import DefaultLayout from "../layouts/DefaultLayout.astro";
---

<DefaultLayout title="Aaron Mandseth - Full stack developer">
	<main class="flex justify-center items-center h-screen w-full relative">
		<canvas id="heroCanvas"></canvas>
		<div class="z-10 row-start-2 max-w-3xl mx-auto text-center">
			<h1
				class="text-4xl font-bold text-brand-highlight text-shadow-lg mb-2"
			>
				Aaron Mandseth
			</h1>
			<h2 class="text-2xl">Full stack developer</h2>
		</div>
	</main>
	<div class="container mx-auto mt-24">
		<section>
			<h1 class="text-2xl">About</h1>
		</section>
	</div>
</DefaultLayout>

<style>
	canvas {
		position: absolute;
		width: 100%;
		height: 100%;
	}
</style>

<script>
	(() => {
		type Point = {
			x: number;
			y: number;
			z: number;
		};

		const canvas = document.getElementById(
			"heroCanvas"
		) as HTMLCanvasElement | null;
		if (!canvas) return;

		const ctx = canvas.getContext("2d");
		if (!ctx) return;

		const resizeCanvas = () => {
			canvas.width = Math.floor(
				canvas.clientWidth * window.devicePixelRatio
			);
			canvas.height = Math.floor(
				canvas.clientHeight * window.devicePixelRatio
			);
		};

		let media = matchMedia(`(resolution: ${window.devicePixelRatio}dppx)`);
		media.addEventListener("change", () => {
			resizeCanvas();
		});

		window.onresize = () => {
			resizeCanvas();
		};

		resizeCanvas();

		const points: Array<Point> = [];

		for (let i = 0; i < 1000; i++) {
			points.push({
				x: Math.random() * 1600 - 800,
				y: Math.random() * 900 - 450,
				z: Math.random() * 1000,
			});
		}

		const drawPoint = (point: Point) => {
			const intensity = (1 - point.z / 1000) * 255;
			const size = (1 - point.z / 1000) * 4;
			const cx = canvas.width / 2;
			const cy = canvas.height / 2;
			const x = cx + point.x / (point.z * 0.001);
			const y = cy + point.y / (point.z * 0.001);

			if (x < 0 || x >= canvas.width || y < 0 || y >= canvas.height) {
				return;
			}

			ctx.fillStyle = `rgb(${intensity}, ${intensity}, ${intensity})`;
			ctx.fillRect(x, y, size, size);
		};

		const movePoint = (point: Point, distance: number) => {
			point.z -= distance;

			while (point.z <= 1) {
				point.z += 1000;
			}
		};

		const clear = () => {
			const html = document.documentElement;
			const body = document.body;
			const scrollPercent =
				(html.scrollTop || body.scrollTop) /
				((html.scrollHeight || body.scrollHeight) - html.clientHeight);

			const r = scrollPercent * 22;
			const g = scrollPercent * 24;
			const b = scrollPercent * 28;

			ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;
			ctx.fillRect(0, 0, canvas.width, canvas.height);
		};

		let prevTime = 0;
		const tick = (timestep: number) => {
			const delta = timestep - prevTime;
			prevTime = timestep;

			clear();

			for (let i = 0; i < points.length; i++) {
				movePoint(points[i], 0.1 * delta);
				drawPoint(points[i]);
			}

			requestAnimationFrame(tick);
		};

		requestAnimationFrame(tick);
	})();
</script>
