---
import { getImage } from "@astrojs/image";
import { Image } from "@astrojs/image/components";
import { Icon } from "astro-icon";

import DefaultLayout from "../layouts/DefaultLayout.astro";

import ahsLogoImage from "../images/ahs.png";
import codeImage from "../images/code.png";
import appImage from "../images/application.png";

const codeImageProps = await getImage({
	src: codeImage,
	alt: "",
	width: 800,
	aspectRatio: 1.6,
	format: "webp",
});

const appImageProps = await getImage({
	src: appImage,
	alt: "",
	width: 400,
	aspectRatio: 1.6,
	format: "webp",
});
---

<DefaultLayout title="Aaron Mandseth - Full stack developer">
	<main>
		<div class="flex justify-center items-center h-screen w-full relative">
			<canvas id="heroCanvas"></canvas>
			<div class="z-10 row-start-2 max-w-3xl mx-auto text-center">
				<h1
					class="text-4xl font-bold text-brand-highlight text-shadow-lg mb-2"
				>
					Aaron Mandseth
				</h1>
				<h2 class="text-3xl mb-4">Full stack developer</h2>
				<div class="flex gap-6 text-xl">
					<a class="flex-1 text-right" href="#about">
						About
						<Icon
							class="inline-block h-5 pb-0.5"
							pack="ph"
							name="arrow-square-right-bold"
						/>
					</a>
					<a class="flex-1 text-left" href="#contact">
						Contact
						<Icon
							class="inline-block h-5 pb-0.5"
							pack="ph"
							name="arrow-square-right-bold"
						/>
					</a>
				</div>
			</div>
		</div>
		<div id="content" class="container mx-auto">
			<section
				id="about"
				class="grid gap-8 text-lg my-24 pt-4 md:grid-cols-2 lg:gap-16"
			>
				<div class="mt-4">
					<div>
						<h1 class="text-3xl my-4">About</h1>
						<p>
							I'm a full stack developer based in Edmonton,
							Alberta. I'm most familiar with C#, ASP .NET Core
							MVC, and related technologies. In my free time I'm
							enjoying learning new tools like
							<a
								class="text-brand-highlight"
								href="https://nextjs.org"
								target="_blank">Next.js</a
							>
							and
							<a
								class="text-brand-highlight"
								href="https://astro.build"
								target="_blank">Astro</a
							>.
						</p>
						<p>
							I am currently working at Alberta Health Services,
							where I build solutions that assist healthcare
							workers in delivering quality patient care.
						</p>
						<a
							href="https://albertahealthservices.ca"
							target="_blank"
						>
							<Image
								src={ahsLogoImage}
								alt="Alberta Health Services logo"
								width={180}
								height={53}
								format="webp"
								class="mt-8"
							/>
						</a>
					</div>
				</div>
				<div class="mt-4 relative">
					<img
						class="shadow-lg"
						src={codeImageProps.src}
						alt=""
						width="100%"
						loading="lazy"
						decoding="async"
					/>
					<img
						class="absolute top-0 origin-bottom-right scale-50 translate-x-4 translate-y-4 shadow-lg"
						src={appImageProps.src}
						alt=""
						width="100%"
						loading="lazy"
						decoding="async"
					/>
				</div>
			</section>
			<section id="contact" class="my-24 pt-4 text-lg">
				<h1 class="text-3xl my-4">Contact</h1>
				<p>
					You can reach me at
					<span class="font-mono rounded-lg bg-gray-800 p-1"
						>aaron</span
					>
					at
					<span class="font-mono rounded-lg bg-gray-800 p-1"
						>aaronmandseth.com</span
					>.
				</p>
				<p>
					I'm always open to exploring new opportunities. I look
					forward to hearing from you!
				</p>
			</section>
		</div>
	</main>

	<style>
		canvas {
			position: absolute;
			width: 100%;
			height: 100%;
		}
	</style>

	<script>
		(() => {
			type Point = {
				x: number;
				y: number;
				z: number;
			};

			const canvas = document.getElementById(
				"heroCanvas"
			) as HTMLCanvasElement | null;
			if (!canvas) return;

			const ctx = canvas.getContext("2d");
			if (!ctx) return;

			const resizeCanvas = () => {
				canvas.width = Math.floor(
					canvas.clientWidth * window.devicePixelRatio
				);
				canvas.height = Math.floor(
					canvas.clientHeight * window.devicePixelRatio
				);
			};

			let media = matchMedia(
				`(resolution: ${window.devicePixelRatio}dppx)`
			);
			media.addEventListener("change", () => {
				resizeCanvas();
			});

			window.onresize = () => {
				resizeCanvas();
			};

			const points: Array<Point> = [];

			for (let i = 0; i < 1000; i++) {
				points.push({
					x: Math.random() * 1600 - 800,
					y: Math.random() * 900 - 450,
					z: Math.random() * 1000,
				});
			}

			const drawPoint = (point: Point) => {
				const intensity = (1 - point.z / 1000) * 255;
				const size = (1 - point.z / 1000) * 4;
				const cx = canvas.width / 2;
				const cy = canvas.height / 2;
				const x = cx + point.x / (point.z * 0.001);
				const y = cy + point.y / (point.z * 0.001);

				if (x < 0 || x >= canvas.width || y < 0 || y >= canvas.height) {
					return;
				}

				ctx.fillStyle = `rgb(${intensity}, ${intensity}, ${intensity})`;
				ctx.fillRect(x, y, size, size);
			};

			const movePoint = (point: Point, distance: number) => {
				point.z -= distance;

				while (point.z <= 1) {
					point.z += 1000;
				}
			};

			const reducedMotion = window.matchMedia(
				"(prefers-reduced-motion: reduce)"
			);

			const clamp = (input: number, min: number, max: number) => {
				return Math.min(Math.max(input, min), max);
			};

			const clear = () => {
				const html = document.documentElement;
				const body = document.body;
				const scrollPercent = clamp(
					(html.scrollTop || body.scrollTop) /
						(canvas.scrollHeight / 3),
					0,
					1
				);

				const r = clamp(scrollPercent * 22, 8, 22);
				const g = clamp(scrollPercent * 24, 8, 24);
				const b = clamp(scrollPercent * 28, 8, 28);

				ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;
				ctx.fillRect(0, 0, canvas.width, canvas.height);
			};

			let prevTime = 0;
			const tick = (timestep: number) => {
				const delta = timestep - prevTime;
				prevTime = timestep;

				clear();

				for (let i = 0; i < points.length; i++) {
					if (!reducedMotion.matches) {
						//Disable all motion if prefers-reduced-motion
						movePoint(points[i], 0.1 * delta);
					}
					drawPoint(points[i]);
				}

				requestAnimationFrame(tick);
			};

			window.addEventListener("load", () => {
				resizeCanvas();
				requestAnimationFrame(tick);
			});
		})();
	</script>
</DefaultLayout>
